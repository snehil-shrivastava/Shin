apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "$rootDir/gradle/scripts/ktlint.gradle"
apply from: "$rootDir/gradle/scripts/versioning.gradle"
apply from: "$rootDir/gradle/scripts/artifacts.gradle"
apply from: "$rootDir/gradle/scripts/release.gradle"

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.0"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }


    defaultConfig {
        applicationId "anime.stream.shin"
        minSdkVersion 21
        targetSdkVersion 29

        archivesBaseName = "shin-$versionName"

        versionCode buildVersionCode()
        versionName buildVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        sourceSets {
            androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    signingConfigs {
        release {
            storeFile file("keystore/release-key.keystore")
            storePassword getStorePassword()
            keyAlias getKeyAlias()
            keyPassword getPassword()
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            pseudoLocalesEnabled false
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_blue",
                    appIconRound: "@mipmap/ic_launcher_blue_round"
            ]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_red",
                    appIconRound: "@mipmap/ic_launcher_red_round"
            ]
        }
    }
}


ext {
    androidX = "1.3.0-alpha01"
    materialDesign = "1.3.0-alpha01"
    swipeRefreshLayout = "1.1.0"
    architectureComponents = "1.1.1"
    architectureComponentsExtensions = "1.1.1"
    androidKtxCore = "1.3.0"
    fragmentKtx = "1.2.5"
    constraintLayout = "2.0.0-beta8"
    lifecycle = "2.2.0"
    room = "2.2.5"
    workManager = "2.3.4"
    legacySupport = "1.0.0"
    coreTesting = "2.1.0"
    testRunner = "1.2.0"
    coroutines = "1.3.5"
    retrofitCoroutinesAdapter = "0.9.2"
    referrerLibrary = "1.1.2"

    junit = "4.12"
    dagger = "2.27"
    retrofit = "2.9.0"
    ankoVersion = "0.10.4"
    glide = "4.11.0"
    lottieVersion = "2.6.0-beta19"
    okHttp = "3.14.9"
    rxJava = "2.1.10"
    rxAndroid = "2.1.1"
    timber = "4.7.1"
    rxRelay = "2.0.0"
    leakCanary = "2.0"
    mockito = "2.18.3"
    mockitoKotlin = "2.0.0"
    commonsMath = "3.6.1"
}

dependencies {
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanary"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"

    implementation "androidx.appcompat:appcompat:$androidX"
    implementation "com.google.android.material:material:$materialDesign"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeRefreshLayout"
    implementation "com.squareup.okhttp3:okhttp:$okHttp"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$retrofitCoroutinesAdapter"
    implementation "io.reactivex.rxjava2:rxjava:$rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroid"
    implementation "com.jakewharton.timber:timber:$timber"
    implementation "com.google.dagger:dagger-android:$dagger"
    implementation "com.google.dagger:dagger-android-support:$dagger"

    // RxRelay
    implementation "com.jakewharton.rxrelay2:rxrelay:$rxRelay"

    // Anko
    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"
    implementation "org.jetbrains.anko:anko-design:$ankoVersion"

    // Android KTX
    implementation "androidx.core:core-ktx:$androidKtxCore"
    implementation "androidx.fragment:fragment-ktx:$fragmentKtx"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle"

    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle"
    testImplementation "androidx.arch.core:core-testing:$coreTesting"
    androidTestImplementation "androidx.arch.core:core-testing:$coreTesting"

    // Room
    implementation "androidx.room:room-runtime:$room"
    implementation "androidx.room:room-rxjava2:$room"
    implementation "androidx.room:room-ktx:$room"
    kapt "androidx.room:room-compiler:$room"
    testImplementation "androidx.room:room-testing:$room"
    androidTestImplementation "androidx.room:room-testing:$room"

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$workManager"
    androidTestImplementation "androidx.work:work-testing:$workManager"
    implementation "androidx.work:work-rxjava2:$workManager"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"

    // Lottie
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Apache commons
    implementation "org.apache.commons:commons-math3:$commonsMath"

    // Testing dependencies
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlin"
    testImplementation "junit:junit:$junit"

    androidTestImplementation "androidx.test:runner:$testRunner"
    androidTestImplementation "androidx.test:rules:$testRunner"
    androidTestUtil "androidx.test:orchestrator:$testRunner"
    androidTestImplementation "org.mockito:mockito-android:$mockito"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okHttp"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlin"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    kapt "com.android.tools.build.jetifier:jetifier-core:$jetifier"
    annotationProcessor "com.android.tools.build.jetifier:jetifier-core:$jetifier"
}